#include <stdio.h>
#include <stdlib.h>

int c = 0;//stores how many collisions happen

int s = 0;//stores how many searhes take place
int arr[10000];
int pos = 0;

  struct Node{

  int data;

   struct Node* next;

};



 struct Node* HashTable[10000] = {NULL};



int hash(int num){

  if(num < 0){

    return ((num + 10000)%10000);

  }

  else{

    return (num%10000);

  }

}



void insert(int key, int val){

   struct Node* ptr = HashTable[key];

   struct Node* prev = NULL;

  while(ptr!=NULL){

    if(val == ptr->data){

      c++;

      return;

    }

    else{

      prev = ptr;

      ptr = ptr->next;

    }

  }

  //adding to an existing one, collision

  if (prev != NULL){

      struct Node* temp = malloc(sizeof(struct Node));

    prev->next = temp;

    temp->next = NULL;

    temp->data = val;

    c++;

  }

  //adding to front, first key

  else{

    struct Node* temp = malloc(sizeof(struct Node));

    HashTable[key] = temp;

    temp->next = NULL;

    temp->data = val;

    arr[pos] = key;

    pos++;

  }

}



void search(int key, int val){

  struct Node* ptr = HashTable[key];

  while(ptr!=NULL){

    if(ptr->data == val){

      s++;

      return;

    }

    ptr = ptr->next;

  }

}


int main(int argc, char** argv){

  FILE* fp = fopen(argv[1], "r");

  char choice;

  while(fscanf(fp, "%c", &choice) ==1){

    if(c == 'i'){

      int data;

      fscanf(fp, "%d", &data);

      int key = hash(data);

      insert(key, data);

    }

    else if(c == 's'){

      int data;

      fscanf(fp, "%d", &data);

      int key = hash(data);

      search(key, data);

    }

  }

  printf("%d\n", c);

  printf("%d", s);

  int i;

  for(i = 0; i < pos; i++){

    struct Node* ptr = HashTable[arr[i]];

    struct Node* prev = NULL;

    while(ptr!=NULL){

      prev=ptr->next;

      free(ptr);

      ptr = prev;

    }

  }

  fclose(fp);



}
